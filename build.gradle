plugins {
    id 'org.jetbrains.intellij' version '1.9.0'
    id 'org.jetbrains.changelog' version '2.0.0'
    id 'com.github.ldenisey.setversions' version '1.0.2'
}

apply plugin: 'org.jetbrains.changelog'

group = 'com.javampire'
version = '2.3.3-SNAPSHOT'

sourceCompatibility = 1.11
targetCompatibility = 1.11
sourceSets.main.java.srcDirs = ['src/main/java', 'src/main/gen']

ext {
    pluginVerifierIdeVersions =
            "IIC-2021.2.1, " +
                    "IIC-2022.3, " +
                    "PCC-2021.2.1, " +
                    "PCC-2022.3, " +
                    "CL-2021.2.1, " +
                    "CL-2022.3, " +
                    "PS-2021.2.1, " +
                    "PS-2022.3, " +
                    "WS-2021.2.1," +
                    "WS-2022.3"
}

repositories {
    mavenCentral()
}

intellij {
    //version.set("2021.2.1")
    version.set("222-EAP-SNAPSHOT")
    //version.set("LATEST-EAP-SNAPSHOT")

    plugins.set([
            'java'
            //,'psiviewer:222-SNAPSHOT'  // For debugging the parser only
    ])

    updateSinceUntilBuild.set(false)

    patchPluginXml {
        sinceBuild.set('212.5080')
        untilBuild.set('')

        changeNotes.set(provider { changelog.getLatest().toHTML() })
    }
}

// Read more: https://github.com/JetBrains/gradle-changelog-plugin
changelog {
    version.set(project.version)
    header.set(project.version)
    headerParserRegex.set(~/\d\.\d\.\d(-SNAPSHOT)?/)
    unreleasedTerm.set("Unreleased")
    groups.set(["Added", "Changed", "Removed", "Fixed"])
}

runPluginVerifier {
    ideVersions = (List) pluginVerifierIdeVersions.split(',')
}

publishPlugin {
    token = System.getenv("intellijPublishToken")
}

task downloadJSDeps() {
    description "Download latest version of the JS dependencies"

    ext.downloadLatestAndFilter = { url, filter ->
        // Get latest release build zip link
        File tempDir = getTemporaryDir()
        File releaseInfo = File.createTempFile('deps_info', '.txt', tempDir)
        new URL(url).withInputStream { i ->
            releaseInfo.withOutputStream { it << i }
        }
        def releaseInfoJson = new groovy.json.JsonSlurper().parse(releaseInfo)
        String latestReleaseUrl
        if (url.contains('/releases/')) {
            latestReleaseUrl = releaseInfoJson.zipball_url
        } else {
            String lastTag = releaseInfoJson[releaseInfoJson.size - 1].ref
            latestReleaseUrl = url.replaceAll('api\\.', '').replaceAll('/repos', '').replaceAll('git/refs/tags', 'archive/' + lastTag + '.zip')
        }

        // Download latest release
        File depZip = File.createTempFile('dep', '.zip', tempDir)
        new URL(latestReleaseUrl).withInputStream { i ->
            depZip.withOutputStream { it << i }
        }

        // Extract build dir
        copy {
            from(zipTree(depZip)) {
                include filter
                eachFile { fcd ->
                    fcd.relativePath = new org.gradle.api.file.RelativePath(true, fcd.relativePath.segments.drop(2))
                }
                includeEmptyDirs = false
            }
            into new File('src/main/resources/html/deps/')
        }
    }

    // View STL
    downloadLatestAndFilter('https://api.github.com/repos/omrips/viewstl/releases/latest', '**/build/**')

    /*
     * JSZip and JSZip Utils
     * Needed for 3mf files preview. Ignored for now, OpenSCAD 3MF generated files seems incompatible for now.
     */
    //downloadLatestAndFilter('https://api.github.com/repos/Stuk/jszip/git/refs/tags', '**/dist/jszip.min.js')
    //downloadLatestAndFilter('https://api.github.com/repos/Stuk/jszip-utils/git/refs/tags', '**/dist/jszip-utils.min.js')
}
setupDependencies.finalizedBy downloadJSDeps
