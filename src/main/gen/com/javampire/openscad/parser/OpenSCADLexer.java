/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.javampire.openscad.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.javampire.openscad.psi.OpenSCADTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>openscad.flex</tt>
 */
class OpenSCADLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IMPORT_PATH_STATE = 2;
  public static final int BUILTIN_OVERRIDABLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\15\1\76\1\27\1\75\1\17\1\67\1\77\1\0\1\10"+
    "\1\72\1\12\1\24\1\66\1\25\1\22\1\11\2\21\1\62\7\21\1\14\1\65\1\6\1\64\1\7"+
    "\1\71\1\0\4\20\1\23\25\20\1\13\1\26\1\16\1\70\1\47\1\0\1\31\1\57\1\42\1\41"+
    "\1\34\1\30\1\50\1\46\1\43\1\56\1\53\1\32\1\45\1\40\1\44\1\55\1\61\1\36\1\33"+
    "\1\35\1\37\1\63\1\54\1\51\1\60\1\52\1\73\1\100\1\74\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\21\13\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\1\1\6\1\34"+
    "\1\2\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\0\1\14\1\13\1\0\1\20\50\13\1\44\16\13"+
    "\1\45\1\46\1\47\1\50\3\43\5\0\1\14\1\0"+
    "\3\13\1\51\7\13\1\0\1\52\71\13\2\43\2\0"+
    "\3\43\2\0\1\53\2\0\1\14\10\13\1\0\1\54"+
    "\1\0\1\55\1\0\1\56\2\13\1\0\1\57\1\13"+
    "\1\0\1\60\2\13\1\0\1\61\4\13\1\62\1\63"+
    "\1\13\1\0\1\64\1\0\1\65\2\13\1\66\5\13"+
    "\1\0\1\67\11\13\1\0\1\70\1\13\1\0\1\71"+
    "\14\13\1\0\1\72\1\0\1\73\2\13\1\0\1\74"+
    "\6\13\1\0\1\75\1\13\1\43\1\0\1\43\1\76"+
    "\1\53\1\0\1\77\2\0\1\100\4\13\1\0\1\101"+
    "\1\0\1\102\1\13\1\0\1\103\5\13\1\0\1\104"+
    "\1\13\1\0\1\105\1\13\1\0\1\106\1\0\1\107"+
    "\6\13\1\110\1\13\1\0\1\111\1\13\1\0\1\112"+
    "\1\13\1\0\1\113\23\13\1\0\1\114\5\13\1\115"+
    "\1\76\2\0\1\116\3\13\1\0\1\117\4\13\1\0"+
    "\1\120\3\13\1\0\1\121\3\13\1\0\1\122\1\0"+
    "\1\123\1\13\1\0\1\124\1\13\1\0\1\125\1\13"+
    "\1\0\1\126\17\13\1\127\5\13\1\130\1\13\1\0"+
    "\1\131\1\0\1\132\1\13\1\0\1\133\1\0\1\134"+
    "\1\13\1\0\1\135\1\0\1\136\1\13\1\0\1\137"+
    "\1\0\1\140\1\0\1\141\2\13\1\0\1\142\1\0"+
    "\1\143\6\13\1\0\1\144\3\13\1\0\1\145\1\13"+
    "\1\0\1\146\1\13\1\0\1\147\6\13\1\150\1\13"+
    "\1\0\1\151\6\13\1\0\1\152\2\13\1\0\1\153"+
    "\1\13\1\0\1\154\7\13\1\0\1\155\1\0\1\156"+
    "\5\13\1\0\1\157\1\0\1\160\2\13\1\0\1\161"+
    "\12\13\1\0\1\162\3\13\1\0\1\163\4\13\1\0"+
    "\1\164\6\13\1\0\1\165\2\13\1\0\1\166\1\0"+
    "\1\167\1\0\1\170\1\13\1\0\1\171\1\0\1\172"+
    "\3\13\1\0\1\173\2\13\1\0\1\174\2\13\1\0"+
    "\1\175\5\13\1\0\1\176\1\0\1\177\1\0\1\200"+
    "\1\13\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[609];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0104\0\u0208\0\u0104\0\u0104\0\u0104\0\u0104\0\u0249\0\u028a"+
    "\0\u02cb\0\u0104\0\u0104\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410"+
    "\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618"+
    "\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u0104\0\u0104"+
    "\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u0104\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0104\0\u0104\0\u0104"+
    "\0\u0965\0\u0104\0\u0104\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0104\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71"+
    "\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u0249\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658"+
    "\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u0104\0\u0104\0\u0104\0\u0104\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c"+
    "\0\u1bad\0\u0249\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33"+
    "\0\u1d74\0\u1db5\0\u0104\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102"+
    "\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a"+
    "\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512"+
    "\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a"+
    "\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922"+
    "\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a"+
    "\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2e77\0\u2eb8\0\u2ef9"+
    "\0\u1aea\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0"+
    "\0\u3101\0\u3142\0\u0104\0\u3183\0\u0104\0\u31c4\0\u0104\0\u3205"+
    "\0\u3246\0\u3287\0\u0104\0\u32c8\0\u3309\0\u0104\0\u334a\0\u338b"+
    "\0\u33cc\0\u0104\0\u340d\0\u344e\0\u348f\0\u34d0\0\u0249\0\u0249"+
    "\0\u3511\0\u3552\0\u0104\0\u3593\0\u0104\0\u35d4\0\u3615\0\u0249"+
    "\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u0104\0\u37dc"+
    "\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4"+
    "\0\u3a25\0\u0104\0\u3a66\0\u3aa7\0\u0104\0\u3ae8\0\u3b29\0\u3b6a"+
    "\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72"+
    "\0\u3db3\0\u3df4\0\u0104\0\u3e35\0\u0104\0\u3e76\0\u3eb7\0\u3ef8"+
    "\0\u0104\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf"+
    "\0\u0104\0\u4100\0\u4141\0\u4182\0\u41c3\0\u18e2\0\u0104\0\u4204"+
    "\0\u0104\0\u4245\0\u4286\0\u0249\0\u42c7\0\u4308\0\u4349\0\u438a"+
    "\0\u43cb\0\u0104\0\u440c\0\u0104\0\u444d\0\u448e\0\u0104\0\u44cf"+
    "\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u0104\0\u4655\0\u4696"+
    "\0\u0104\0\u46d7\0\u4718\0\u0104\0\u4759\0\u0104\0\u479a\0\u47db"+
    "\0\u481c\0\u485d\0\u489e\0\u48df\0\u0249\0\u4920\0\u4961\0\u0104"+
    "\0\u49a2\0\u49e3\0\u0104\0\u4a24\0\u4a65\0\u0104\0\u4aa6\0\u4ae7"+
    "\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef"+
    "\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7"+
    "\0\u4f38\0\u4f79\0\u0104\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u50be"+
    "\0\u50ff\0\u2c6f\0\u5140\0\u5181\0\u0104\0\u51c2\0\u5203\0\u5244"+
    "\0\u5285\0\u0104\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u0104"+
    "\0\u540b\0\u544c\0\u548d\0\u54ce\0\u0104\0\u550f\0\u5550\0\u5591"+
    "\0\u55d2\0\u0104\0\u5613\0\u0104\0\u5654\0\u5695\0\u0104\0\u56d6"+
    "\0\u5717\0\u0104\0\u5758\0\u5799\0\u0104\0\u57da\0\u581b\0\u585c"+
    "\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u5a23\0\u5a64"+
    "\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u0249\0\u5ba9\0\u5bea\0\u5c2b"+
    "\0\u5c6c\0\u5cad\0\u0104\0\u5cee\0\u5d2f\0\u0104\0\u5d70\0\u0104"+
    "\0\u5db1\0\u5df2\0\u0104\0\u5e33\0\u0104\0\u5e74\0\u5eb5\0\u0104"+
    "\0\u5ef6\0\u0104\0\u5f37\0\u5f78\0\u0104\0\u5fb9\0\u0104\0\u5ffa"+
    "\0\u0104\0\u603b\0\u607c\0\u60bd\0\u0104\0\u60fe\0\u0104\0\u613f"+
    "\0\u6180\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\u0104\0\u6306"+
    "\0\u6347\0\u6388\0\u63c9\0\u0104\0\u640a\0\u644b\0\u0104\0\u648c"+
    "\0\u64cd\0\u0104\0\u650e\0\u654f\0\u6590\0\u65d1\0\u6612\0\u6653"+
    "\0\u0249\0\u6694\0\u66d5\0\u0104\0\u6716\0\u6757\0\u6798\0\u67d9"+
    "\0\u681a\0\u685b\0\u689c\0\u0104\0\u68dd\0\u691e\0\u695f\0\u0104"+
    "\0\u69a0\0\u69e1\0\u0104\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5\0\u6b26"+
    "\0\u6b67\0\u6ba8\0\u6be9\0\u0104\0\u6c2a\0\u0104\0\u6c6b\0\u6cac"+
    "\0\u6ced\0\u6d2e\0\u6d6f\0\u6db0\0\u0104\0\u6df1\0\u0104\0\u6e32"+
    "\0\u6e73\0\u6eb4\0\u0104\0\u6ef5\0\u6f36\0\u6f77\0\u6fb8\0\u6ff9"+
    "\0\u703a\0\u707b\0\u70bc\0\u70fd\0\u713e\0\u717f\0\u0104\0\u71c0"+
    "\0\u7201\0\u7242\0\u7283\0\u0104\0\u72c4\0\u7305\0\u7346\0\u7387"+
    "\0\u73c8\0\u0104\0\u7409\0\u744a\0\u748b\0\u74cc\0\u750d\0\u754e"+
    "\0\u758f\0\u0104\0\u75d0\0\u7611\0\u7652\0\u0104\0\u7693\0\u0104"+
    "\0\u76d4\0\u0104\0\u7715\0\u7756\0\u0104\0\u7797\0\u0104\0\u77d8"+
    "\0\u7819\0\u785a\0\u789b\0\u0104\0\u78dc\0\u791d\0\u795e\0\u0104"+
    "\0\u799f\0\u79e0\0\u7a21\0\u0104\0\u7a62\0\u7aa3\0\u7ae4\0\u7b25"+
    "\0\u7b66\0\u7ba7\0\u0104\0\u7be8\0\u0104\0\u7c29\0\u0104\0\u7c6a"+
    "\0\u0249";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[609];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\5\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\6\1\16\2\17\1\20\1\21\1\17\1\22"+
    "\1\23\1\5\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\6\17\1\44\4\17\1\20\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\5\5\6\1\7\1\10"+
    "\1\11\1\63\1\13\1\14\1\15\1\6\1\16\2\17"+
    "\1\20\1\21\1\17\1\22\1\23\1\5\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\6\17\1\44"+
    "\4\17\1\20\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\64\5\65\1\66\1\67\5\64\1\65\63\64\1\5"+
    "\5\6\2\5\1\70\4\5\1\6\1\5\3\71\1\5"+
    "\1\71\4\5\34\71\15\5\102\0\5\6\7\0\1\6"+
    "\147\0\1\72\100\0\1\73\25\0\1\74\1\75\105\0"+
    "\3\17\1\0\1\17\4\0\34\17\34\0\2\17\1\20"+
    "\1\76\1\77\4\0\4\17\1\77\25\17\1\20\1\17"+
    "\36\0\1\76\40\0\1\76\16\0\26\24\1\100\1\101"+
    "\51\24\17\0\3\17\1\0\1\17\4\0\1\17\1\102"+
    "\1\103\4\17\1\104\4\17\1\105\17\17\34\0\3\17"+
    "\1\0\1\17\4\0\3\17\1\106\1\17\1\107\4\17"+
    "\1\110\14\17\1\111\4\17\34\0\3\17\1\0\1\17"+
    "\4\0\4\17\1\112\3\17\1\113\2\17\1\114\1\115"+
    "\17\17\34\0\3\17\1\0\1\17\4\0\4\17\1\116"+
    "\1\117\1\17\1\120\2\17\1\121\1\122\11\17\1\123"+
    "\3\17\1\124\2\17\34\0\3\17\1\0\1\17\4\0"+
    "\1\17\1\125\1\126\7\17\1\127\6\17\1\130\12\17"+
    "\34\0\3\17\1\0\1\17\4\0\1\17\1\131\2\17"+
    "\1\132\1\17\1\133\25\17\34\0\3\17\1\0\1\17"+
    "\4\0\1\17\1\134\2\17\1\135\7\17\1\136\17\17"+
    "\34\0\3\17\1\0\1\17\4\0\3\17\1\137\4\17"+
    "\1\140\23\17\34\0\3\17\1\0\1\17\4\0\14\17"+
    "\1\141\17\17\34\0\3\17\1\0\1\17\4\0\13\17"+
    "\1\142\20\17\34\0\3\17\1\0\1\17\4\0\4\17"+
    "\1\143\1\17\1\144\1\145\3\17\1\146\1\147\1\17"+
    "\1\150\11\17\1\151\3\17\34\0\3\17\1\0\1\17"+
    "\4\0\1\152\2\17\1\153\4\17\1\154\4\17\1\155"+
    "\16\17\34\0\3\17\1\0\1\17\4\0\1\156\5\17"+
    "\1\157\25\17\34\0\3\17\1\0\1\17\4\0\1\17"+
    "\1\160\5\17\1\161\3\17\1\162\1\163\17\17\34\0"+
    "\3\17\1\0\1\17\4\0\7\17\1\164\24\17\34\0"+
    "\3\17\1\0\1\17\4\0\1\17\1\165\4\17\1\166"+
    "\5\17\1\167\17\17\34\0\3\17\1\0\1\17\4\0"+
    "\4\17\1\170\27\17\101\0\1\171\100\0\1\172\113\0"+
    "\1\173\101\0\1\174\11\0\1\175\1\75\66\0\6\64"+
    "\2\0\72\64\5\65\2\0\5\64\1\65\63\64\17\0"+
    "\3\71\1\0\1\71\4\0\34\71\15\0\2\176\2\0"+
    "\2\74\5\176\1\177\1\176\1\74\63\176\4\200\2\201"+
    "\4\200\1\202\1\203\1\200\1\201\63\200\21\0\1\76"+
    "\1\0\1\204\10\0\1\204\25\0\1\76\35\0\2\17"+
    "\1\205\1\0\1\17\2\206\2\0\32\17\1\205\1\17"+
    "\15\0\101\24\17\0\3\17\1\0\1\17\4\0\2\17"+
    "\1\207\31\17\34\0\3\17\1\0\1\17\4\0\14\17"+
    "\1\210\17\17\34\0\3\17\1\0\1\17\4\0\10\17"+
    "\1\211\23\17\34\0\3\17\1\0\1\17\4\0\6\17"+
    "\1\212\25\17\34\0\3\17\1\0\1\17\4\0\3\17"+
    "\1\213\7\17\1\214\20\17\34\0\3\17\1\0\1\17"+
    "\4\0\1\17\1\215\32\17\34\0\3\17\1\0\1\17"+
    "\4\0\14\17\1\216\17\17\34\0\3\17\1\0\1\17"+
    "\4\0\3\17\1\217\30\17\34\0\3\17\1\0\1\17"+
    "\4\0\5\17\1\220\2\17\1\221\23\17\16\0\5\222"+
    "\2\0\1\223\4\0\1\222\1\0\3\17\1\0\1\17"+
    "\4\0\34\17\34\0\3\17\1\0\1\17\4\0\10\17"+
    "\1\224\23\17\34\0\3\17\1\0\1\17\4\0\14\17"+
    "\1\225\3\17\1\226\13\17\34\0\3\17\1\0\1\17"+
    "\4\0\1\17\1\227\32\17\34\0\3\17\1\0\1\17"+
    "\4\0\6\17\1\230\25\17\34\0\3\17\1\0\1\17"+
    "\4\0\6\17\1\231\25\17\34\0\3\17\1\0\1\17"+
    "\4\0\1\17\1\232\32\17\34\0\3\17\1\0\1\17"+
    "\4\0\10\17\1\233\7\17\1\234\13\17\34\0\3\17"+
    "\1\0\1\17\4\0\16\17\1\235\15\17\34\0\3\17"+
    "\1\0\1\17\4\0\6\17\1\236\1\237\24\17\34\0"+
    "\3\17\1\0\1\17\4\0\12\17\1\240\21\17\34\0"+
    "\3\17\1\0\1\17\4\0\3\17\1\241\30\17\34\0"+
    "\3\17\1\0\1\17\4\0\16\17\1\242\15\17\34\0"+
    "\3\17\1\0\1\17\4\0\25\17\1\243\6\17\34\0"+
    "\3\17\1\0\1\17\4\0\10\17\1\244\23\17\34\0"+
    "\3\17\1\0\1\17\4\0\21\17\1\245\12\17\34\0"+
    "\3\17\1\0\1\17\4\0\1\17\1\246\5\17\1\247"+
    "\24\17\34\0\3\17\1\0\1\17\4\0\10\17\1\250"+
    "\23\17\34\0\3\17\1\0\1\17\4\0\3\17\1\251"+
    "\4\17\1\252\23\17\34\0\3\17\1\0\1\17\4\0"+
    "\5\17\1\253\1\17\1\254\24\17\34\0\3\17\1\0"+
    "\1\17\4\0\4\17\1\255\27\17\34\0\3\17\1\0"+
    "\1\17\4\0\11\17\1\256\1\17\1\257\20\17\34\0"+
    "\3\17\1\0\1\17\4\0\6\17\1\260\25\17\34\0"+
    "\3\17\1\0\1\17\4\0\1\261\33\17\34\0\3\17"+
    "\1\0\1\17\4\0\13\17\1\262\20\17\34\0\3\17"+
    "\1\0\1\17\4\0\14\17\1\263\17\17\34\0\3\17"+
    "\1\0\1\17\4\0\27\17\1\264\4\17\34\0\3\17"+
    "\1\0\1\17\4\0\6\17\1\265\25\17\34\0\3\17"+
    "\1\0\1\17\4\0\2\17\1\266\1\267\4\17\1\270"+
    "\23\17\34\0\3\17\1\0\1\17\4\0\6\17\1\271"+
    "\4\17\1\272\20\17\34\0\3\17\1\0\1\17\4\0"+
    "\2\17\1\273\31\17\34\0\3\17\1\0\1\17\4\0"+
    "\17\17\1\274\14\17\34\0\3\17\1\0\1\17\4\0"+
    "\5\17\1\275\4\17\1\276\21\17\34\0\3\17\1\0"+
    "\1\17\4\0\25\17\1\277\6\17\34\0\3\17\1\0"+
    "\1\17\4\0\1\300\33\17\34\0\3\17\1\0\1\17"+
    "\4\0\11\17\1\301\22\17\34\0\3\17\1\0\1\17"+
    "\4\0\21\17\1\302\12\17\34\0\3\17\1\0\1\17"+
    "\4\0\2\17\1\303\31\17\34\0\3\17\1\0\1\17"+
    "\4\0\6\17\1\304\1\17\1\305\23\17\34\0\3\17"+
    "\1\0\1\17\4\0\11\17\1\306\22\17\34\0\3\17"+
    "\1\0\1\17\4\0\2\17\1\307\31\17\34\0\3\17"+
    "\1\0\1\17\4\0\6\17\1\310\25\17\34\0\3\17"+
    "\1\0\1\17\4\0\14\17\1\311\17\17\34\0\3\17"+
    "\1\0\1\17\4\0\2\17\1\312\21\17\1\313\7\17"+
    "\34\0\3\17\1\0\1\17\4\0\6\17\1\314\25\17"+
    "\15\0\1\315\1\316\1\317\1\320\1\175\1\321\5\315"+
    "\1\322\1\315\1\175\63\315\2\176\2\0\77\176\2\0"+
    "\10\176\2\323\2\176\2\323\1\176\1\323\1\176\1\323"+
    "\2\176\17\323\1\176\14\323\2\176\1\323\12\176\12\200"+
    "\1\324\72\200\2\201\4\200\1\324\1\203\1\200\1\201"+
    "\63\200\11\325\1\326\1\327\66\325\12\200\1\324\1\200"+
    "\2\330\2\200\2\330\1\200\1\330\1\200\1\330\2\200"+
    "\17\330\1\200\14\330\2\200\1\330\12\200\21\0\1\331"+
    "\2\0\2\206\34\0\1\331\35\0\2\17\1\205\1\0"+
    "\1\17\4\0\32\17\1\205\1\17\36\0\1\331\40\0"+
    "\1\331\35\0\3\17\1\0\1\17\4\0\3\17\1\332"+
    "\30\17\34\0\3\17\1\0\1\17\4\0\14\17\1\333"+
    "\17\17\34\0\3\17\1\0\1\17\4\0\12\17\1\334"+
    "\21\17\34\0\3\17\1\0\1\17\4\0\4\17\1\335"+
    "\6\17\1\336\20\17\34\0\3\17\1\0\1\17\4\0"+
    "\10\17\1\337\23\17\34\0\3\17\1\0\1\17\4\0"+
    "\10\17\1\340\23\17\34\0\3\17\1\0\1\17\4\0"+
    "\3\17\1\341\30\17\16\0\5\342\2\0\1\343\4\0"+
    "\1\342\1\0\3\17\1\0\1\17\4\0\34\17\16\0"+
    "\5\344\2\0\1\345\4\0\1\344\1\0\3\17\1\0"+
    "\1\17\4\0\34\17\16\0\5\346\2\0\1\347\4\0"+
    "\1\346\1\0\3\17\1\0\1\17\4\0\34\17\16\0"+
    "\5\222\2\0\1\223\4\0\1\222\102\0\3\17\1\0"+
    "\1\17\4\0\4\17\1\350\27\17\34\0\3\17\1\0"+
    "\1\17\4\0\23\17\1\351\10\17\16\0\5\352\2\0"+
    "\1\353\4\0\1\352\1\0\3\17\1\0\1\17\4\0"+
    "\34\17\34\0\3\17\1\0\1\17\4\0\6\17\1\354"+
    "\25\17\16\0\5\355\2\0\1\356\4\0\1\355\1\0"+
    "\3\17\1\0\1\17\4\0\34\17\34\0\3\17\1\0"+
    "\1\17\4\0\1\357\33\17\34\0\3\17\1\0\1\17"+
    "\4\0\2\17\1\360\31\17\16\0\5\361\2\0\1\362"+
    "\4\0\1\361\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\34\0\3\17\1\0\1\17\4\0\10\17\1\363\23\17"+
    "\34\0\3\17\1\0\1\17\4\0\4\17\1\364\27\17"+
    "\34\0\3\17\1\0\1\17\4\0\5\17\1\365\26\17"+
    "\34\0\3\17\1\0\1\17\4\0\1\17\1\366\32\17"+
    "\34\0\3\17\1\0\1\17\4\0\16\17\1\367\15\17"+
    "\34\0\3\17\1\0\1\17\4\0\4\17\1\370\27\17"+
    "\34\0\3\17\1\0\1\17\4\0\14\17\1\371\17\17"+
    "\16\0\5\372\2\0\1\373\4\0\1\372\1\0\3\17"+
    "\1\0\1\17\4\0\34\17\16\0\5\374\2\0\1\375"+
    "\4\0\1\374\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\34\0\3\17\1\0\1\17\4\0\5\17\1\376\26\17"+
    "\34\0\3\17\1\0\1\17\4\0\10\17\1\377\23\17"+
    "\34\0\3\17\1\0\1\17\4\0\4\17\1\u0100\27\17"+
    "\34\0\3\17\1\0\1\17\4\0\11\17\1\u0101\22\17"+
    "\34\0\3\17\1\0\1\17\4\0\13\17\1\u0102\20\17"+
    "\34\0\3\17\1\0\1\17\4\0\11\17\1\u0103\22\17"+
    "\34\0\3\17\1\0\1\17\4\0\1\17\1\u0104\32\17"+
    "\34\0\3\17\1\0\1\17\4\0\10\17\1\u0105\23\17"+
    "\16\0\5\u0106\1\u0107\6\0\1\u0106\1\0\3\17\1\0"+
    "\1\17\4\0\34\17\34\0\3\17\1\0\1\17\4\0"+
    "\4\17\1\u0108\27\17\34\0\3\17\1\0\1\17\4\0"+
    "\14\17\1\u0109\17\17\34\0\3\17\1\0\1\17\4\0"+
    "\15\17\1\u010a\16\17\34\0\3\17\1\0\1\17\4\0"+
    "\1\u010b\33\17\34\0\3\17\1\0\1\17\4\0\2\17"+
    "\1\u010c\31\17\34\0\3\17\1\0\1\17\4\0\3\17"+
    "\1\u010d\30\17\34\0\3\17\1\0\1\17\4\0\4\17"+
    "\1\u010e\27\17\34\0\3\17\1\0\1\17\4\0\12\17"+
    "\1\u010f\21\17\34\0\3\17\1\0\1\17\4\0\14\17"+
    "\1\u0110\17\17\16\0\5\u0111\2\0\1\u0112\4\0\1\u0111"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\34\0\3\17"+
    "\1\0\1\17\4\0\12\17\1\u0113\21\17\16\0\5\u0114"+
    "\2\0\1\u0115\4\0\1\u0114\1\0\3\17\1\0\1\17"+
    "\4\0\34\17\34\0\3\17\1\0\1\17\4\0\2\17"+
    "\1\u0116\31\17\34\0\3\17\1\0\1\17\4\0\13\17"+
    "\1\u0117\20\17\34\0\3\17\1\0\1\17\4\0\1\u0118"+
    "\1\17\1\u0119\1\u011a\3\17\1\u011b\1\u011c\16\17\1\u011d"+
    "\4\17\34\0\3\17\1\0\1\17\4\0\4\17\1\u011e"+
    "\27\17\34\0\3\17\1\0\1\17\4\0\2\17\1\u011f"+
    "\31\17\34\0\3\17\1\0\1\17\4\0\14\17\1\u0120"+
    "\17\17\34\0\3\17\1\0\1\17\4\0\3\17\1\u0121"+
    "\30\17\16\0\5\u0122\2\0\1\u0123\4\0\1\u0122\1\0"+
    "\3\17\1\0\1\17\4\0\34\17\16\0\5\u0124\2\0"+
    "\1\u0125\4\0\1\u0124\1\0\3\17\1\0\1\17\4\0"+
    "\34\17\34\0\3\17\1\0\1\17\4\0\5\17\1\u0126"+
    "\26\17\34\0\3\17\1\0\1\17\4\0\6\17\1\u0127"+
    "\25\17\16\0\5\u0128\2\0\1\u0129\4\0\1\u0128\1\0"+
    "\3\17\1\0\1\17\4\0\23\17\1\u012a\10\17\34\0"+
    "\3\17\1\0\1\17\4\0\7\17\1\u012b\24\17\34\0"+
    "\3\17\1\0\1\17\4\0\2\17\1\u012c\31\17\34\0"+
    "\3\17\1\0\1\17\4\0\4\17\1\u012d\27\17\34\0"+
    "\3\17\1\0\1\17\4\0\26\17\1\u012e\5\17\34\0"+
    "\3\17\1\0\1\17\4\0\30\17\1\u012f\3\17\16\0"+
    "\5\u0130\2\0\1\u0131\4\0\1\u0130\1\0\3\17\1\0"+
    "\1\17\4\0\34\17\34\0\3\17\1\0\1\17\4\0"+
    "\3\17\1\u0132\30\17\15\0\1\315\1\316\1\317\1\320"+
    "\1\315\1\316\74\315\1\316\1\317\1\320\1\315\1\316"+
    "\3\315\1\u0133\67\315\11\0\1\u0134\71\0\1\317\6\0"+
    "\1\u0134\67\0\1\315\1\316\1\317\1\320\1\175\1\321"+
    "\3\315\1\u0133\1\315\1\322\1\315\1\175\64\315\1\316"+
    "\1\317\1\320\1\315\1\316\6\315\2\u0135\2\315\2\u0135"+
    "\1\315\1\u0135\1\315\1\u0135\2\315\17\u0135\1\315\14\u0135"+
    "\2\315\1\u0135\12\315\2\176\2\0\10\176\2\323\1\u0136"+
    "\1\176\2\323\1\176\1\323\1\176\1\323\2\176\17\323"+
    "\1\176\14\323\2\176\1\323\12\176\11\200\1\u0137\1\u0138"+
    "\66\200\12\325\1\327\77\325\1\u0139\1\u013a\66\325\12\200"+
    "\1\324\1\200\2\330\1\u013b\1\200\2\330\1\200\1\330"+
    "\1\200\1\330\2\200\17\330\1\200\14\330\2\200\1\330"+
    "\12\200\17\0\3\17\1\0\1\17\4\0\4\17\1\u013c"+
    "\27\17\34\0\3\17\1\0\1\17\4\0\6\17\1\u013d"+
    "\25\17\34\0\3\17\1\0\1\17\4\0\5\17\1\u013e"+
    "\26\17\34\0\3\17\1\0\1\17\4\0\6\17\1\u013f"+
    "\25\17\34\0\3\17\1\0\1\17\4\0\20\17\1\u0140"+
    "\13\17\16\0\5\u0141\2\0\1\u0142\4\0\1\u0141\1\0"+
    "\3\17\1\0\1\17\4\0\34\17\16\0\5\u0143\2\0"+
    "\1\u0144\4\0\1\u0143\1\0\3\17\1\0\1\17\4\0"+
    "\32\17\1\u0145\1\17\16\0\5\u0146\2\0\1\u0147\4\0"+
    "\1\u0146\1\0\3\17\1\0\1\17\4\0\34\17\16\0"+
    "\5\342\2\0\1\343\4\0\1\342\64\0\5\344\2\0"+
    "\1\345\4\0\1\344\64\0\5\346\2\0\1\347\4\0"+
    "\1\346\102\0\3\17\1\0\1\17\4\0\1\17\1\u0148"+
    "\32\17\34\0\3\17\1\0\1\17\4\0\7\17\1\u0149"+
    "\24\17\16\0\5\352\2\0\1\353\4\0\1\352\102\0"+
    "\3\17\1\0\1\17\4\0\12\17\1\u014a\21\17\16\0"+
    "\5\355\2\0\1\356\4\0\1\355\102\0\3\17\1\0"+
    "\1\17\4\0\1\17\1\u014b\32\17\34\0\3\17\1\0"+
    "\1\17\4\0\4\17\1\u014c\27\17\16\0\5\361\2\0"+
    "\1\362\4\0\1\361\64\0\5\u014d\2\0\1\u014e\4\0"+
    "\1\u014d\1\0\3\17\1\0\1\17\4\0\34\17\34\0"+
    "\3\17\1\0\1\17\4\0\6\17\1\u014f\25\17\16\0"+
    "\5\u0150\2\0\1\u0151\4\0\1\u0150\1\0\3\17\1\0"+
    "\1\17\4\0\34\17\34\0\3\17\1\0\1\17\4\0"+
    "\6\17\1\u0152\25\17\16\0\5\u0153\2\0\1\u0154\4\0"+
    "\1\u0153\1\0\3\17\1\0\1\17\4\0\34\17\16\0"+
    "\5\372\2\0\1\373\4\0\1\372\64\0\5\374\2\0"+
    "\1\375\4\0\1\374\64\0\5\u0155\2\0\1\u0156\4\0"+
    "\1\u0155\1\0\3\17\1\0\1\17\4\0\34\17\34\0"+
    "\3\17\1\0\1\17\4\0\3\17\1\u0157\30\17\34\0"+
    "\3\17\1\0\1\17\4\0\3\17\1\u0158\30\17\34\0"+
    "\3\17\1\0\1\17\4\0\22\17\1\u0159\11\17\34\0"+
    "\3\17\1\0\1\17\4\0\4\17\1\u015a\27\17\34\0"+
    "\3\17\1\0\1\17\4\0\5\17\1\u015b\26\17\34\0"+
    "\3\17\1\0\1\17\4\0\11\17\1\u015c\22\17\16\0"+
    "\5\u0106\1\u0107\6\0\1\u0106\102\0\3\17\1\0\1\17"+
    "\4\0\1\u015d\33\17\34\0\3\17\1\0\1\17\4\0"+
    "\10\17\1\u015e\23\17\16\0\5\u015f\2\0\1\u0160\4\0"+
    "\1\u015f\1\0\3\17\1\0\1\17\4\0\34\17\34\0"+
    "\3\17\1\0\1\17\4\0\4\17\1\u0161\27\17\16\0"+
    "\5\u0162\2\0\1\u0163\4\0\1\u0162\1\0\3\17\1\0"+
    "\1\17\4\0\34\17\34\0\3\17\1\0\1\17\4\0"+
    "\3\17\1\u0164\30\17\16\0\5\u0165\2\0\1\u0166\4\0"+
    "\1\u0165\1\0\3\17\1\0\1\17\4\0\34\17\34\0"+
    "\3\17\1\0\1\17\4\0\2\17\1\u0167\31\17\34\0"+
    "\3\17\1\0\1\17\4\0\6\17\1\u0168\25\17\16\0"+
    "\5\u0111\2\0\1\u0112\4\0\1\u0111\102\0\3\17\1\0"+
    "\1\17\4\0\1\17\1\u0169\32\17\16\0\5\u0114\2\0"+
    "\1\u0115\4\0\1\u0114\102\0\3\17\1\0\1\17\4\0"+
    "\11\17\1\u016a\22\17\34\0\3\17\1\0\1\17\4\0"+
    "\10\17\1\u016b\23\17\34\0\3\17\1\0\1\17\4\0"+
    "\7\17\1\u016c\24\17\34\0\3\17\1\0\1\17\4\0"+
    "\13\17\1\u016d\20\17\34\0\3\17\1\0\1\17\4\0"+
    "\5\17\1\u016e\26\17\34\0\3\17\1\0\1\17\4\0"+
    "\10\17\1\u016f\23\17\34\0\3\17\1\0\1\17\4\0"+
    "\7\17\1\u0170\24\17\34\0\3\17\1\0\1\17\4\0"+
    "\14\17\1\u0171\17\17\34\0\3\17\1\0\1\17\4\0"+
    "\6\17\1\u0172\25\17\34\0\3\17\1\0\1\17\4\0"+
    "\7\17\1\u0173\24\17\34\0\3\17\1\0\1\17\4\0"+
    "\6\17\1\u0174\25\17\34\0\3\17\1\0\1\17\4\0"+
    "\4\17\1\u0175\27\17\16\0\5\u0122\2\0\1\u0123\4\0"+
    "\1\u0122\64\0\5\u0124\2\0\1\u0125\4\0\1\u0124\102\0"+
    "\3\17\1\0\1\17\4\0\15\17\1\u0176\16\17\34\0"+
    "\3\17\1\0\1\17\4\0\14\17\1\u0177\17\17\16\0"+
    "\5\u0128\2\0\1\u0129\4\0\1\u0128\102\0\3\17\1\0"+
    "\1\17\4\0\14\17\1\u0178\17\17\34\0\3\17\1\0"+
    "\1\17\4\0\2\17\1\u0179\31\17\16\0\5\u017a\2\0"+
    "\1\u017b\4\0\1\u017a\1\0\3\17\1\0\1\17\4\0"+
    "\34\17\34\0\3\17\1\0\1\17\4\0\10\17\1\u017c"+
    "\23\17\34\0\3\17\1\0\1\17\4\0\4\17\1\u017d"+
    "\27\17\34\0\3\17\1\0\1\17\4\0\16\17\1\u017e"+
    "\1\17\1\u017f\13\17\16\0\5\u0130\2\0\1\u0131\4\0"+
    "\1\u0130\102\0\3\17\1\0\1\17\4\0\13\17\1\u0180"+
    "\20\17\15\0\1\315\1\316\1\317\1\320\1\315\1\316"+
    "\3\315\1\u0181\67\315\11\0\1\u0181\67\0\1\315\1\316"+
    "\1\317\1\320\1\315\1\316\6\315\2\u0135\1\u0182\1\315"+
    "\2\u0135\1\315\1\u0135\1\315\1\u0135\2\315\17\u0135\1\315"+
    "\14\u0135\2\315\1\u0135\12\315\11\200\1\0\1\u0138\66\200"+
    "\11\325\1\0\1\u013a\66\325\4\200\2\u013b\4\200\1\u0183"+
    "\2\200\1\u013b\63\200\1\0\5\u0184\2\0\1\u0185\4\0"+
    "\1\u0184\1\0\3\17\1\0\1\17\4\0\34\17\34\0"+
    "\3\17\1\0\1\17\4\0\13\17\1\u0186\20\17\34\0"+
    "\3\17\1\0\1\17\4\0\5\17\1\u0187\26\17\34\0"+
    "\3\17\1\0\1\17\4\0\10\17\1\u0188\23\17\16\0"+
    "\5\u0141\2\0\1\u0142\4\0\1\u0141\64\0\5\u0143\2\0"+
    "\1\u0144\4\0\1\u0143\64\0\5\u0189\2\0\1\u018a\4\0"+
    "\1\u0189\1\0\3\17\1\0\1\17\4\0\34\17\16\0"+
    "\5\u0146\2\0\1\u0147\4\0\1\u0146\102\0\3\17\1\0"+
    "\1\17\4\0\6\17\1\u018b\25\17\34\0\3\17\1\0"+
    "\1\17\4\0\25\17\1\u018c\6\17\34\0\3\17\1\0"+
    "\1\17\4\0\16\17\1\u018d\15\17\34\0\3\17\1\0"+
    "\1\17\4\0\12\17\1\u018e\21\17\16\0\5\u018f\2\0"+
    "\1\u0190\4\0\1\u018f\1\0\3\17\1\0\1\17\4\0"+
    "\34\17\16\0\5\u014d\2\0\1\u014e\4\0\1\u014d\102\0"+
    "\3\17\1\0\1\17\4\0\4\17\1\u0191\27\17\16\0"+
    "\5\u0150\2\0\1\u0151\4\0\1\u0150\102\0\3\17\1\0"+
    "\1\17\4\0\4\17\1\u0192\27\17\16\0\5\u0153\2\0"+
    "\1\u0154\4\0\1\u0153\64\0\5\u0155\2\0\1\u0156\4\0"+
    "\1\u0155\102\0\3\17\1\0\1\17\4\0\2\17\1\u0193"+
    "\31\17\16\0\5\u0194\2\0\1\u0195\4\0\1\u0194\1\0"+
    "\3\17\1\0\1\17\4\0\34\17\34\0\3\17\1\0"+
    "\1\17\4\0\4\17\1\u0196\27\17\34\0\3\17\1\0"+
    "\1\17\4\0\6\17\1\u0197\25\17\34\0\3\17\1\0"+
    "\1\17\4\0\4\17\1\u0198\27\17\16\0\5\u0199\2\0"+
    "\1\u019a\4\0\1\u0199\1\0\3\17\1\0\1\17\4\0"+
    "\34\17\16\0\5\u019b\2\0\1\u019c\4\0\1\u019b\1\0"+
    "\3\17\1\0\1\17\4\0\34\17\16\0\5\u015f\2\0"+
    "\1\u0160\4\0\1\u015f\102\0\3\17\1\0\1\17\4\0"+
    "\6\17\1\u019d\25\17\16\0\5\u0162\2\0\1\u0163\4\0"+
    "\1\u0162\64\0\5\u019e\2\0\1\u019f\4\0\1\u019e\1\0"+
    "\3\17\1\0\1\17\4\0\34\17\16\0\5\u0165\2\0"+
    "\1\u0166\4\0\1\u0165\102\0\3\17\1\0\1\17\4\0"+
    "\4\17\1\u01a0\27\17\16\0\5\u01a1\2\0\1\u01a2\4\0"+
    "\1\u01a1\1\0\3\17\1\0\1\17\4\0\34\17\34\0"+
    "\3\17\1\0\1\17\4\0\5\17\1\u01a3\26\17\16\0"+
    "\5\u01a4\2\0\1\u01a5\4\0\1\u01a4\1\0\3\17\1\0"+
    "\1\17\4\0\6\17\1\u01a6\25\17\34\0\3\17\1\0"+
    "\1\17\4\0\11\17\1\u01a7\22\17\34\0\3\17\1\0"+
    "\1\17\4\0\10\17\1\u01a8\23\17\34\0\3\17\1\0"+
    "\1\17\4\0\3\17\1\u01a9\30\17\34\0\3\17\1\0"+
    "\1\17\4\0\6\17\1\u01aa\25\17\34\0\3\17\1\0"+
    "\1\17\4\0\11\17\1\u01ab\22\17\34\0\3\17\1\0"+
    "\1\17\4\0\15\17\1\u01ac\16\17\34\0\3\17\1\0"+
    "\1\17\4\0\14\17\1\u01ad\17\17\34\0\3\17\1\0"+
    "\1\17\4\0\3\17\1\u01ae\30\17\34\0\3\17\1\0"+
    "\1\17\4\0\11\17\1\u01af\22\17\34\0\3\17\1\0"+
    "\1\17\4\0\5\17\1\u01b0\26\17\34\0\3\17\1\0"+
    "\1\17\4\0\5\17\1\u01b1\26\17\34\0\3\17\1\0"+
    "\1\17\4\0\1\17\1\u01b2\32\17\34\0\3\17\1\0"+
    "\1\17\4\0\6\17\1\u01b3\25\17\34\0\3\17\1\0"+
    "\1\17\4\0\24\17\1\u01b4\7\17\34\0\3\17\1\0"+
    "\1\17\4\0\4\17\1\u01b5\27\17\16\0\5\u017a\2\0"+
    "\1\u017b\4\0\1\u017a\102\0\3\17\1\0\1\17\4\0"+
    "\5\17\1\u01b6\26\17\34\0\3\17\1\0\1\17\4\0"+
    "\12\17\1\u01b7\21\17\34\0\3\17\1\0\1\17\4\0"+
    "\4\17\1\u01b8\27\17\34\0\3\17\1\0\1\17\4\0"+
    "\14\17\1\u01b9\17\17\34\0\3\17\1\0\1\17\4\0"+
    "\14\17\1\u01ba\17\17\15\0\2\u0181\1\317\1\320\75\u0181"+
    "\11\200\1\u01bb\1\u0138\66\200\1\0\5\u0184\2\0\1\u0185"+
    "\4\0\1\u0184\102\0\3\17\1\0\1\17\4\0\14\17"+
    "\1\u01bc\17\17\16\0\5\u01bd\2\0\1\u01be\4\0\1\u01bd"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\16\0\5\u01bf"+
    "\2\0\1\u01c0\4\0\1\u01bf\1\0\3\17\1\0\1\17"+
    "\4\0\34\17\16\0\5\u0189\2\0\1\u018a\4\0\1\u0189"+
    "\102\0\3\17\1\0\1\17\4\0\17\17\1\u01c1\14\17"+
    "\16\0\5\u01c2\2\0\1\u01c3\4\0\1\u01c2\1\0\3\17"+
    "\1\0\1\17\4\0\34\17\16\0\5\u01c4\2\0\1\u01c5"+
    "\4\0\1\u01c4\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\34\0\3\17\1\0\1\17\4\0\4\17\1\u01c6\27\17"+
    "\16\0\5\u018f\2\0\1\u0190\4\0\1\u018f\64\0\5\u01c7"+
    "\2\0\1\u01c8\4\0\1\u01c7\1\0\3\17\1\0\1\17"+
    "\4\0\34\17\16\0\5\u01c9\2\0\1\u01ca\4\0\1\u01c9"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\34\0\3\17"+
    "\1\0\1\17\4\0\1\17\1\u01cb\32\17\16\0\5\u0194"+
    "\2\0\1\u0195\4\0\1\u0194\64\0\5\u01cc\2\0\1\u01cd"+
    "\4\0\1\u01cc\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\16\0\5\u01ce\2\0\1\u01cf\4\0\1\u01ce\1\0\3\17"+
    "\1\0\1\17\4\0\34\17\16\0\5\u01d0\2\0\1\u01d1"+
    "\4\0\1\u01d0\1\0\3\17\1\0\1\17\4\0\17\17"+
    "\1\u01d2\14\17\16\0\5\u0199\2\0\1\u019a\4\0\1\u0199"+
    "\64\0\5\u019b\2\0\1\u019c\4\0\1\u019b\102\0\3\17"+
    "\1\0\1\17\4\0\4\17\1\u01d3\27\17\16\0\5\u019e"+
    "\2\0\1\u019f\4\0\1\u019e\64\0\5\u01d4\2\0\1\u01d5"+
    "\4\0\1\u01d4\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\16\0\5\u01a1\2\0\1\u01a2\4\0\1\u01a1\64\0\5\u01d6"+
    "\2\0\1\u01d7\4\0\1\u01d6\1\0\3\17\1\0\1\17"+
    "\4\0\34\17\16\0\5\u01a4\2\0\1\u01a5\4\0\1\u01a4"+
    "\102\0\3\17\1\0\1\17\4\0\4\17\1\u01d8\27\17"+
    "\34\0\3\17\1\0\1\17\4\0\4\17\1\u01d9\27\17"+
    "\34\0\3\17\1\0\1\17\4\0\12\17\1\u01da\21\17"+
    "\34\0\3\17\1\0\1\17\4\0\5\17\1\u01db\26\17"+
    "\34\0\3\17\1\0\1\17\4\0\13\17\1\u01dc\20\17"+
    "\34\0\3\17\1\0\1\17\4\0\4\17\1\u01dd\27\17"+
    "\16\0\5\u01de\2\0\1\u01df\4\0\1\u01de\1\0\3\17"+
    "\1\0\1\17\4\0\34\17\34\0\3\17\1\0\1\17"+
    "\4\0\2\17\1\u01e0\31\17\34\0\3\17\1\0\1\17"+
    "\4\0\4\17\1\u01e1\27\17\34\0\3\17\1\0\1\17"+
    "\4\0\4\17\1\u01e2\27\17\16\0\5\u01e3\2\0\1\u01e4"+
    "\4\0\1\u01e3\1\0\3\17\1\0\1\17\4\0\17\17"+
    "\1\u01e5\14\17\16\0\5\u01e6\2\0\1\u01e7\4\0\1\u01e6"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\34\0\3\17"+
    "\1\0\1\17\4\0\5\17\1\u01e8\26\17\16\0\5\u01e9"+
    "\2\0\1\u01ea\4\0\1\u01e9\1\0\3\17\1\0\1\17"+
    "\4\0\34\17\34\0\3\17\1\0\1\17\4\0\3\17"+
    "\1\u01eb\30\17\34\0\3\17\1\0\1\17\4\0\17\17"+
    "\1\u01ec\14\17\34\0\3\17\1\0\1\17\4\0\5\17"+
    "\1\u01ed\26\17\34\0\3\17\1\0\1\17\4\0\11\17"+
    "\1\u01ee\22\17\34\0\3\17\1\0\1\17\4\0\10\17"+
    "\1\u01ef\23\17\34\0\3\17\1\0\1\17\4\0\10\17"+
    "\1\u01f0\23\17\34\0\3\17\1\0\1\17\4\0\10\17"+
    "\1\u01f1\23\17\16\0\5\u01bd\2\0\1\u01be\4\0\1\u01bd"+
    "\64\0\5\u01bf\2\0\1\u01c0\4\0\1\u01bf\102\0\3\17"+
    "\1\0\1\17\4\0\4\17\1\u01f2\27\17\16\0\5\u01c2"+
    "\2\0\1\u01c3\4\0\1\u01c2\64\0\5\u01c4\2\0\1\u01c5"+
    "\4\0\1\u01c4\64\0\5\u01f3\2\0\1\u01f4\4\0\1\u01f3"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\16\0\5\u01c7"+
    "\2\0\1\u01c8\4\0\1\u01c7\64\0\5\u01c9\2\0\1\u01ca"+
    "\4\0\1\u01c9\102\0\3\17\1\0\1\17\4\0\5\17"+
    "\1\u01f5\26\17\16\0\5\u01cc\2\0\1\u01cd\4\0\1\u01cc"+
    "\64\0\5\u01ce\2\0\1\u01cf\4\0\1\u01ce\64\0\5\u01d0"+
    "\2\0\1\u01d1\4\0\1\u01d0\102\0\3\17\1\0\1\17"+
    "\4\0\4\17\1\u01f6\27\17\34\0\3\17\1\0\1\17"+
    "\4\0\10\17\1\u01f7\23\17\16\0\5\u01d4\2\0\1\u01d5"+
    "\4\0\1\u01d4\64\0\5\u01d6\2\0\1\u01d7\4\0\1\u01d6"+
    "\102\0\3\17\1\0\1\17\4\0\10\17\1\u01f8\23\17"+
    "\34\0\3\17\1\0\1\17\4\0\6\17\1\u01f9\25\17"+
    "\34\0\3\17\1\0\1\17\4\0\5\17\1\u01fa\26\17"+
    "\16\0\5\u01fb\2\0\1\u01fc\4\0\1\u01fb\1\0\3\17"+
    "\1\0\1\17\4\0\34\17\34\0\3\17\1\0\1\17"+
    "\4\0\10\17\1\u01fd\23\17\34\0\3\17\1\0\1\17"+
    "\4\0\1\u01fe\33\17\16\0\5\u01de\2\0\1\u01df\4\0"+
    "\1\u01de\64\0\5\u01ff\2\0\1\u0200\4\0\1\u01ff\1\0"+
    "\3\17\1\0\1\17\4\0\34\17\34\0\3\17\1\0"+
    "\1\17\4\0\12\17\1\u0201\21\17\16\0\5\u0202\1\u0203"+
    "\6\0\1\u0202\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\16\0\5\u01e3\2\0\1\u01e4\4\0\1\u01e3\102\0\3\17"+
    "\1\0\1\17\4\0\3\17\1\u0204\5\17\1\u0205\22\17"+
    "\16\0\5\u01e6\2\0\1\u01e7\4\0\1\u01e6\102\0\3\17"+
    "\1\0\1\17\4\0\6\17\1\u0206\25\17\16\0\5\u01e9"+
    "\2\0\1\u01ea\4\0\1\u01e9\102\0\3\17\1\0\1\17"+
    "\4\0\23\17\1\u0207\10\17\34\0\3\17\1\0\1\17"+
    "\4\0\15\17\1\u0208\16\17\34\0\3\17\1\0\1\17"+
    "\4\0\13\17\1\u0209\20\17\34\0\3\17\1\0\1\17"+
    "\4\0\6\17\1\u020a\25\17\16\0\5\u020b\2\0\1\u020c"+
    "\4\0\1\u020b\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\16\0\5\u020d\2\0\1\u020e\4\0\1\u020d\1\0\3\17"+
    "\1\0\1\17\4\0\17\17\1\u020f\14\17\34\0\3\17"+
    "\1\0\1\17\4\0\21\17\1\u0210\12\17\16\0\5\u01f3"+
    "\2\0\1\u01f4\4\0\1\u01f3\102\0\3\17\1\0\1\17"+
    "\4\0\4\17\1\u0211\27\17\34\0\3\17\1\0\1\17"+
    "\4\0\21\17\1\u0212\12\17\34\0\3\17\1\0\1\17"+
    "\4\0\12\17\1\u0213\21\17\16\0\5\u0214\2\0\1\u0215"+
    "\4\0\1\u0214\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\16\0\5\u0216\2\0\1\u0217\4\0\1\u0216\1\0\3\17"+
    "\1\0\1\17\4\0\34\17\34\0\3\17\1\0\1\17"+
    "\4\0\13\17\1\u0218\20\17\16\0\5\u01fb\2\0\1\u01fc"+
    "\4\0\1\u01fb\102\0\3\17\1\0\1\17\4\0\20\17"+
    "\1\u0219\13\17\16\0\5\u021a\2\0\1\u021b\4\0\1\u021a"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\16\0\5\u01ff"+
    "\2\0\1\u0200\4\0\1\u01ff\102\0\3\17\1\0\1\17"+
    "\4\0\5\17\1\u021c\26\17\16\0\5\u0202\1\u0203\6\0"+
    "\1\u0202\102\0\3\17\1\0\1\17\4\0\5\17\1\u021d"+
    "\26\17\34\0\3\17\1\0\1\17\4\0\21\17\1\u021e"+
    "\12\17\34\0\3\17\1\0\1\17\4\0\13\17\1\u021f"+
    "\20\17\34\0\3\17\1\0\1\17\4\0\13\17\1\u0220"+
    "\20\17\34\0\3\17\1\0\1\17\4\0\14\17\1\u0221"+
    "\17\17\34\0\3\17\1\0\1\17\4\0\14\17\1\u0222"+
    "\17\17\34\0\3\17\1\0\1\17\4\0\14\17\1\u0223"+
    "\17\17\16\0\5\u020b\2\0\1\u020c\4\0\1\u020b\64\0"+
    "\5\u020d\2\0\1\u020e\4\0\1\u020d\102\0\3\17\1\0"+
    "\1\17\4\0\10\17\1\u0224\23\17\34\0\3\17\1\0"+
    "\1\17\4\0\5\17\1\u0225\26\17\16\0\5\u0226\2\0"+
    "\1\u0227\4\0\1\u0226\1\0\3\17\1\0\1\17\4\0"+
    "\34\17\34\0\3\17\1\0\1\17\4\0\5\17\1\u0228"+
    "\26\17\34\0\3\17\1\0\1\17\4\0\4\17\1\u0229"+
    "\27\17\16\0\5\u0214\2\0\1\u0215\4\0\1\u0214\64\0"+
    "\5\u0216\2\0\1\u0217\4\0\1\u0216\102\0\3\17\1\0"+
    "\1\17\4\0\14\17\1\u022a\17\17\16\0\5\u022b\2\0"+
    "\1\u022c\4\0\1\u022b\1\0\3\17\1\0\1\17\4\0"+
    "\34\17\16\0\5\u021a\2\0\1\u021b\4\0\1\u021a\102\0"+
    "\3\17\1\0\1\17\4\0\13\17\1\u022d\20\17\34\0"+
    "\3\17\1\0\1\17\4\0\2\17\1\u022e\31\17\34\0"+
    "\3\17\1\0\1\17\4\0\1\u022f\33\17\34\0\3\17"+
    "\1\0\1\17\4\0\21\17\1\u0230\12\17\16\0\5\u0231"+
    "\2\0\1\u0232\4\0\1\u0231\1\0\3\17\1\0\1\17"+
    "\4\0\34\17\34\0\3\17\1\0\1\17\4\0\11\17"+
    "\1\u0233\22\17\34\0\3\17\1\0\1\17\4\0\10\17"+
    "\1\u0234\23\17\34\0\3\17\1\0\1\17\4\0\10\17"+
    "\1\u0235\23\17\34\0\3\17\1\0\1\17\4\0\7\17"+
    "\1\u0236\24\17\34\0\3\17\1\0\1\17\4\0\6\17"+
    "\1\u0237\25\17\16\0\5\u0226\2\0\1\u0227\4\0\1\u0226"+
    "\102\0\3\17\1\0\1\17\4\0\6\17\1\u0238\25\17"+
    "\16\0\5\u0239\2\0\1\u023a\4\0\1\u0239\1\0\3\17"+
    "\1\0\1\17\4\0\34\17\34\0\3\17\1\0\1\17"+
    "\4\0\10\17\1\u023b\23\17\16\0\5\u022b\2\0\1\u022c"+
    "\4\0\1\u022b\102\0\3\17\1\0\1\17\4\0\14\17"+
    "\1\u023c\17\17\16\0\5\u023d\2\0\1\u023e\4\0\1\u023d"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\16\0\5\u023f"+
    "\2\0\1\u0240\4\0\1\u023f\1\0\3\17\1\0\1\17"+
    "\4\0\34\17\16\0\5\u0241\2\0\1\u0242\4\0\1\u0241"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\16\0\5\u0231"+
    "\2\0\1\u0232\4\0\1\u0231\102\0\3\17\1\0\1\17"+
    "\4\0\7\17\1\u0243\24\17\16\0\5\u0244\2\0\1\u0245"+
    "\4\0\1\u0244\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\16\0\5\u0246\2\0\1\u0247\4\0\1\u0246\1\0\3\17"+
    "\1\0\1\17\4\0\34\17\34\0\3\17\1\0\1\17"+
    "\4\0\15\17\1\u0248\16\17\34\0\3\17\1\0\1\17"+
    "\4\0\7\17\1\u0249\24\17\34\0\3\17\1\0\1\17"+
    "\4\0\7\17\1\u024a\24\17\16\0\5\u0239\2\0\1\u023a"+
    "\4\0\1\u0239\64\0\5\u024b\2\0\1\u024c\4\0\1\u024b"+
    "\1\0\3\17\1\0\1\17\4\0\34\17\34\0\3\17"+
    "\1\0\1\17\4\0\10\17\1\u024d\23\17\16\0\5\u023d"+
    "\2\0\1\u023e\4\0\1\u023d\64\0\5\u023f\2\0\1\u0240"+
    "\4\0\1\u023f\64\0\5\u0241\2\0\1\u0242\4\0\1\u0241"+
    "\102\0\3\17\1\0\1\17\4\0\2\17\1\u024e\31\17"+
    "\16\0\5\u0244\2\0\1\u0245\4\0\1\u0244\64\0\5\u0246"+
    "\2\0\1\u0247\4\0\1\u0246\64\0\5\u024f\2\0\1\u0250"+
    "\4\0\1\u024f\1\0\3\17\1\0\1\17\4\0\34\17"+
    "\34\0\3\17\1\0\1\17\4\0\11\17\1\u0251\22\17"+
    "\34\0\3\17\1\0\1\17\4\0\11\17\1\u0252\22\17"+
    "\16\0\5\u024b\2\0\1\u024c\4\0\1\u024b\64\0\5\u0253"+
    "\2\0\1\u0254\4\0\1\u0253\1\0\3\17\1\0\1\17"+
    "\4\0\17\17\1\u0255\14\17\34\0\3\17\1\0\1\17"+
    "\4\0\4\17\1\u0256\27\17\16\0\5\u024f\2\0\1\u0250"+
    "\4\0\1\u024f\102\0\3\17\1\0\1\17\4\0\4\17"+
    "\1\u0257\27\17\34\0\3\17\1\0\1\17\4\0\4\17"+
    "\1\u0258\27\17\16\0\5\u0253\2\0\1\u0254\4\0\1\u0253"+
    "\102\0\3\17\1\0\1\17\4\0\1\u0259\33\17\16\0"+
    "\5\u025a\2\0\1\u025b\4\0\1\u025a\1\0\3\17\1\0"+
    "\1\17\4\0\34\17\16\0\5\u025c\2\0\1\u025d\4\0"+
    "\1\u025c\1\0\3\17\1\0\1\17\4\0\34\17\16\0"+
    "\5\u025e\2\0\1\u025f\4\0\1\u025e\1\0\3\17\1\0"+
    "\1\17\4\0\34\17\34\0\3\17\1\0\1\17\4\0"+
    "\14\17\1\u0260\17\17\16\0\5\u025a\2\0\1\u025b\4\0"+
    "\1\u025a\64\0\5\u025c\2\0\1\u025d\4\0\1\u025c\64\0"+
    "\5\u025e\2\0\1\u025f\4\0\1\u025e\102\0\3\17\1\0"+
    "\1\17\4\0\6\17\1\u0261\25\17\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31915];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\1\1\4\11\3\1\2\11"+
    "\23\1\11\11\6\1\3\11\1\1\2\11\1\1\1\0"+
    "\2\1\1\0\1\11\67\1\4\11\3\1\5\0\1\1"+
    "\1\0\13\1\1\0\1\11\73\1\2\0\3\1\2\0"+
    "\1\1\2\0\11\1\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\2\1\1\0\1\11\1\1\1\0\1\11\2\1"+
    "\1\0\1\11\7\1\1\0\1\11\1\0\1\11\10\1"+
    "\1\0\1\11\11\1\1\0\1\11\1\1\1\0\1\11"+
    "\14\1\1\0\1\11\1\0\1\11\2\1\1\0\1\11"+
    "\6\1\1\0\1\11\2\1\1\0\2\1\1\11\1\0"+
    "\1\11\2\0\5\1\1\0\1\11\1\0\1\11\1\1"+
    "\1\0\1\11\5\1\1\0\1\11\1\1\1\0\1\11"+
    "\1\1\1\0\1\11\1\0\1\11\10\1\1\0\1\11"+
    "\1\1\1\0\1\11\1\1\1\0\1\11\23\1\1\0"+
    "\1\11\7\1\2\0\1\11\3\1\1\0\1\11\4\1"+
    "\1\0\1\11\3\1\1\0\1\11\3\1\1\0\1\11"+
    "\1\0\1\11\1\1\1\0\1\11\1\1\1\0\1\11"+
    "\1\1\1\0\1\11\25\1\1\11\1\1\1\0\1\11"+
    "\1\0\1\11\1\1\1\0\1\11\1\0\1\11\1\1"+
    "\1\0\1\11\1\0\1\11\1\1\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\1\1\0\1\11\1\0\1\11"+
    "\6\1\1\0\1\11\3\1\1\0\1\11\1\1\1\0"+
    "\1\11\1\1\1\0\1\11\10\1\1\0\1\11\6\1"+
    "\1\0\1\11\2\1\1\0\1\11\1\1\1\0\1\11"+
    "\7\1\1\0\1\11\1\0\1\11\5\1\1\0\1\11"+
    "\1\0\1\11\2\1\1\0\1\11\12\1\1\0\1\11"+
    "\3\1\1\0\1\11\4\1\1\0\1\11\6\1\1\0"+
    "\1\11\2\1\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\1\1\0\1\11\1\0\1\11\3\1\1\0\1\11"+
    "\2\1\1\0\1\11\2\1\1\0\1\11\5\1\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[609];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  OpenSCADLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 130: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 131: break;
          case 3: 
            { return OpenSCADTypes.LT;
            } 
            // fall through
          case 132: break;
          case 4: 
            { return OpenSCADTypes.GT;
            } 
            // fall through
          case 133: break;
          case 5: 
            { return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 134: break;
          case 6: 
            { return OpenSCADTypes.DIV;
            } 
            // fall through
          case 135: break;
          case 7: 
            { return OpenSCADTypes.MUL;
            } 
            // fall through
          case 136: break;
          case 8: 
            { return OpenSCADTypes.LBRACKET;
            } 
            // fall through
          case 137: break;
          case 9: 
            { return OpenSCADTypes.COLON;
            } 
            // fall through
          case 138: break;
          case 10: 
            { return OpenSCADTypes.RBRACKET;
            } 
            // fall through
          case 139: break;
          case 11: 
            { return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 140: break;
          case 12: 
            { return OpenSCADTypes.NUMBER_LITERAL;
            } 
            // fall through
          case 141: break;
          case 13: 
            { return OpenSCADTypes.DOT;
            } 
            // fall through
          case 142: break;
          case 14: 
            { return OpenSCADTypes.PLUS;
            } 
            // fall through
          case 143: break;
          case 15: 
            { return OpenSCADTypes.MINUS;
            } 
            // fall through
          case 144: break;
          case 16: 
            { return OpenSCADTypes.STRING_LITERAL;
            } 
            // fall through
          case 145: break;
          case 17: 
            { return OpenSCADTypes.EQUALS;
            } 
            // fall through
          case 146: break;
          case 18: 
            { return OpenSCADTypes.SEMICOLON;
            } 
            // fall through
          case 147: break;
          case 19: 
            { return OpenSCADTypes.COMMA;
            } 
            // fall through
          case 148: break;
          case 20: 
            { return OpenSCADTypes.PERC;
            } 
            // fall through
          case 149: break;
          case 21: 
            { return OpenSCADTypes.EXP;
            } 
            // fall through
          case 150: break;
          case 22: 
            { return OpenSCADTypes.QUERY;
            } 
            // fall through
          case 151: break;
          case 23: 
            { return OpenSCADTypes.RPARENTH;
            } 
            // fall through
          case 152: break;
          case 24: 
            { return OpenSCADTypes.LBRACE;
            } 
            // fall through
          case 153: break;
          case 25: 
            { return OpenSCADTypes.RBRACE;
            } 
            // fall through
          case 154: break;
          case 26: 
            { return OpenSCADTypes.HASH;
            } 
            // fall through
          case 155: break;
          case 27: 
            { return OpenSCADTypes.EXCL;
            } 
            // fall through
          case 156: break;
          case 28: 
            { return OpenSCADTypes.IMPORT_PATH;
            } 
            // fall through
          case 157: break;
          case 29: 
            { return OpenSCADTypes.IMPORT_START;
            } 
            // fall through
          case 158: break;
          case 30: 
            { yybegin(YYINITIAL); return OpenSCADTypes.IMPORT_END;
            } 
            // fall through
          case 159: break;
          case 31: 
            { yybegin(YYINITIAL); return OpenSCADTypes.LPARENTH;
            } 
            // fall through
          case 160: break;
          case 32: 
            { yybegin(YYINITIAL); return OpenSCADTypes.IDENTIFIER;
            } 
            // fall through
          case 161: break;
          case 33: 
            { return OpenSCADTypes.LE;
            } 
            // fall through
          case 162: break;
          case 34: 
            { return OpenSCADTypes.GE;
            } 
            // fall through
          case 163: break;
          case 35: 
            { return OpenSCADTypes.COMMENT_SINGLELINE;
            } 
            // fall through
          case 164: break;
          case 36: 
            { return OpenSCADTypes.IF_KEYWORD;
            } 
            // fall through
          case 165: break;
          case 37: 
            { return OpenSCADTypes.EQ;
            } 
            // fall through
          case 166: break;
          case 38: 
            { return OpenSCADTypes.NE;
            } 
            // fall through
          case 167: break;
          case 39: 
            { return OpenSCADTypes.AND;
            } 
            // fall through
          case 168: break;
          case 40: 
            { return OpenSCADTypes.OR;
            } 
            // fall through
          case 169: break;
          case 41: 
            { return OpenSCADTypes.FOR_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 42: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return OpenSCADTypes.LN_KEYWORD;
            } 
            // fall through
          case 171: break;
          case 43: 
            { return OpenSCADTypes.COMMENT_C_STYLE;
            } 
            // fall through
          case 172: break;
          case 44: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.ABS_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 45: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.LET_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.LEN_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 47: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.LOG_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 48: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.STR_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 49: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.SIN_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 50: 
            { return OpenSCADTypes.EACH_KEYWORD;
            } 
            // fall through
          case 179: break;
          case 51: 
            { return OpenSCADTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 52: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.EXP_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 53: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.TAN_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 54: 
            { return OpenSCADTypes.TRUE_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 55: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { yybegin(IMPORT_PATH_STATE); return OpenSCADTypes.USE_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 56: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.COS_KEYWORD;
            } 
            // fall through
          case 185: break;
          case 57: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.CHR_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 58: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.ORD_KEYWORD;
            } 
            // fall through
          case 187: break;
          case 59: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.MAX_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 60: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.MIN_KEYWORD;
            } 
            // fall through
          case 189: break;
          case 61: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return OpenSCADTypes.POW_KEYWORD;
            } 
            // fall through
          case 190: break;
          case 62: 
            { return OpenSCADTypes.COMMENT_CUSTOMIZER_VALUE;
            } 
            // fall through
          case 191: break;
          case 63: 
            { return OpenSCADTypes.COMMENT_DOC;
            } 
            // fall through
          case 192: break;
          case 64: 
            { return OpenSCADTypes.FALSE_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 65: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.ASIN_KEYWORD;
            } 
            // fall through
          case 194: break;
          case 66: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.ATAN_KEYWORD;
            } 
            // fall through
          case 195: break;
          case 67: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.ACOS_KEYWORD;
            } 
            // fall through
          case 196: break;
          case 68: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.SIGN_KEYWORD;
            } 
            // fall through
          case 197: break;
          case 69: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.SQRT_KEYWORD;
            } 
            // fall through
          case 198: break;
          case 70: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.ECHO_KEYWORD;
            } 
            // fall through
          case 199: break;
          case 71: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.TEXT_KEYWORD;
            } 
            // fall through
          case 200: break;
          case 72: 
            { return OpenSCADTypes.UNDEF_KEYWORD;
            } 
            // fall through
          case 201: break;
          case 73: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.NORM_KEYWORD;
            } 
            // fall through
          case 202: break;
          case 74: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.CEIL_KEYWORD;
            } 
            // fall through
          case 203: break;
          case 75: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.CUBE_KEYWORD;
            } 
            // fall through
          case 204: break;
          case 76: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 4);
            { return OpenSCADTypes.HULL_KEYWORD;
            } 
            // fall through
          case 205: break;
          case 77: 
            { return OpenSCADTypes.COMMENT_SINGLELINE_BLOCK;
            } 
            // fall through
          case 206: break;
          case 78: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.FLOOR_KEYWORD;
            } 
            // fall through
          case 207: break;
          case 79: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.ATAN2_KEYWORD;
            } 
            // fall through
          case 208: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.SCALE_KEYWORD;
            } 
            // fall through
          case 209: break;
          case 81: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.RANDS_KEYWORD;
            } 
            // fall through
          case 210: break;
          case 82: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.ROUND_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 83: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.UNION_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 84: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.CROSS_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 85: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.COLOR_KEYWORD;
            } 
            // fall through
          case 214: break;
          case 86: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 5);
            { return OpenSCADTypes.CHILD_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 87: 
            { yybegin(BUILTIN_OVERRIDABLE); return OpenSCADTypes.MODULE_KEYWORD;
            } 
            // fall through
          case 216: break;
          case 88: 
            { return OpenSCADTypes.COMMENT_CUSTOMIZER_TABS;
            } 
            // fall through
          case 217: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.ASSERT_KEYWORD;
            } 
            // fall through
          case 218: break;
          case 90: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.ASSIGN_KEYWORD;
            } 
            // fall through
          case 219: break;
          case 91: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.LOOKUP_KEYWORD;
            } 
            // fall through
          case 220: break;
          case 92: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.SEARCH_KEYWORD;
            } 
            // fall through
          case 221: break;
          case 93: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.SPHERE_KEYWORD;
            } 
            // fall through
          case 222: break;
          case 94: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.SQUARE_KEYWORD;
            } 
            // fall through
          case 223: break;
          case 95: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.RESIZE_KEYWORD;
            } 
            // fall through
          case 224: break;
          case 96: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.RENDER_KEYWORD;
            } 
            // fall through
          case 225: break;
          case 97: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.ROTATE_KEYWORD;
            } 
            // fall through
          case 226: break;
          case 98: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.CIRCLE_KEYWORD;
            } 
            // fall through
          case 227: break;
          case 99: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.CONCAT_KEYWORD;
            } 
            // fall through
          case 228: break;
          case 100: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.IS_NUM_KEYWORD;
            } 
            // fall through
          case 229: break;
          case 101: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 230: break;
          case 102: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.OFFSET_KEYWORD;
            } 
            // fall through
          case 231: break;
          case 103: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 6);
            { return OpenSCADTypes.MIRROR_KEYWORD;
            } 
            // fall through
          case 232: break;
          case 104: 
            { yybegin(BUILTIN_OVERRIDABLE); return OpenSCADTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 233: break;
          case 105: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { return OpenSCADTypes.SURFACE_KEYWORD;
            } 
            // fall through
          case 234: break;
          case 106: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { return OpenSCADTypes.IS_LIST_KEYWORD;
            } 
            // fall through
          case 235: break;
          case 107: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { return OpenSCADTypes.IS_BOOL_KEYWORD;
            } 
            // fall through
          case 236: break;
          case 108: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { yybegin(IMPORT_PATH_STATE); return OpenSCADTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 237: break;
          case 109: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { return OpenSCADTypes.POLYGON_KEYWORD;
            } 
            // fall through
          case 238: break;
          case 110: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 7);
            { return OpenSCADTypes.VERSION_KEYWORD;
            } 
            // fall through
          case 239: break;
          case 111: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 8);
            { return OpenSCADTypes.CHILDREN_KEYWORD;
            } 
            // fall through
          case 240: break;
          case 112: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 8);
            { return OpenSCADTypes.CYLINDER_KEYWORD;
            } 
            // fall through
          case 241: break;
          case 113: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 8);
            { return OpenSCADTypes.IS_UNDEF_KEYWORD;
            } 
            // fall through
          case 242: break;
          case 114: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return OpenSCADTypes.TRANSLATE_KEYWORD;
            } 
            // fall through
          case 243: break;
          case 115: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return OpenSCADTypes.IS_STRING_KEYWORD;
            } 
            // fall through
          case 244: break;
          case 116: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 9);
            { return OpenSCADTypes.MINKOWSKI_KEYWORD;
            } 
            // fall through
          case 245: break;
          case 117: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 10);
            { return OpenSCADTypes.DIFFERENCE_KEYWORD;
            } 
            // fall through
          case 246: break;
          case 118: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 10);
            { return OpenSCADTypes.IMPORT_STL_KEYWORD;
            } 
            // fall through
          case 247: break;
          case 119: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 10);
            { return OpenSCADTypes.IMPORT_DXF_KEYWORD;
            } 
            // fall through
          case 248: break;
          case 120: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 10);
            { return OpenSCADTypes.MULTMATRIX_KEYWORD;
            } 
            // fall through
          case 249: break;
          case 121: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 10);
            { return OpenSCADTypes.PROJECTION_KEYWORD;
            } 
            // fall through
          case 250: break;
          case 122: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 10);
            { return OpenSCADTypes.POLYHEDRON_KEYWORD;
            } 
            // fall through
          case 251: break;
          case 123: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 11);
            { return OpenSCADTypes.IS_FUNCTION_KEYWORD;
            } 
            // fall through
          case 252: break;
          case 124: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 11);
            { return OpenSCADTypes.VERSION_NUM_KEYWORD;
            } 
            // fall through
          case 253: break;
          case 125: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 12);
            { return OpenSCADTypes.INTERSECTION_KEYWORD;
            } 
            // fall through
          case 254: break;
          case 126: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 13);
            { return OpenSCADTypes.PARENT_MODULE_KEYWORD;
            } 
            // fall through
          case 255: break;
          case 127: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 14);
            { return OpenSCADTypes.LINEAR_EXTRUDE_KEYWORD;
            } 
            // fall through
          case 256: break;
          case 128: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 14);
            { return OpenSCADTypes.ROTATE_EXTRUDE_KEYWORD;
            } 
            // fall through
          case 257: break;
          case 129: 
            { return OpenSCADTypes.INTERSECTION_FOR_KEYWORD;
            } 
            // fall through
          case 258: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
