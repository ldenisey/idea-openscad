{
    parserClass="com.javampire.openscad.parser.OpenSCADParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="OpenSCAD"
    psiImplClassSuffix="Impl"
    psiPackage="com.javampire.openscad.psi"
    psiImplPackage="com.javampire.openscad.psi.impl"

    elementTypeHolderClass="com.javampire.openscad.psi.OpenSCADTypes"
    elementTypeFactory="com.javampire.openscad.psi.OpenSCADElementFactory.getElementType"
    tokenTypeClass="com.javampire.openscad.psi.OpenSCADTokenType"

    extends(".*expr")=expr
    extends(".*obj")=object
    extends(".*op")=operator

    psiImplUtilClass="com.javampire.openscad.psi.OpenSCADPsiImplUtil"
    parserUtilClass="com.javampire.openscad.parser.OpenSCADParserUtil"
}

openSCADFile ::= item*

private item ::= (
    statement
    | comment_item
)

private comment_item ::= C_STYLE_COMMENT | DOC_COMMENT | END_OF_LINE_COMMENT | BLOCK_COMMENT

private statement ::= object | declaration | import

import ::= (
    include_import
    | use_import
){
     methods=[getPresentation]
 }

include_import ::= INCLUDE_KEYWORD IMPORT_START import_path_ref IMPORT_END
use_import ::= USE_KEYWORD IMPORT_START import_path_ref IMPORT_END

import_path_ref ::= IMPORT_PATH {
    mixin="com.javampire.openscad.psi.OpenSCADImportPathRefElementImpl"
}

object ::= builtin_obj
         | if_obj
         | for_obj
         | module_call_obj
         | block_obj
         | compound_obj
         | empty_obj

builtin_obj ::= (builtin_obj_ref arg_assignment_list SEMICOLON)
                | (builtin_op block_obj)
                | (builtin_op statement)
builtin_obj_ref ::= ASSERT_KEYWORD
                  | CHILD_KEYWORD
                  | CHILDREN_KEYWORD
                  | CIRCLE_KEYWORD
                  | CUBE_KEYWORD
                  | CYLINDER_KEYWORD
                  | ECHO_KEYWORD
                  | IMPORT_KEYWORD
                  | IMPORT_DXF_KEYWORD
                  | IMPORT_STL_KEYWORD
                  | POLYGON_KEYWORD
                  | POLYHEDRON_KEYWORD
                  | SPHERE_KEYWORD
                  | SQUARE_KEYWORD
                  | SURFACE_KEYWORD
                  | TEXT_KEYWORD {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements=["com.javampire.openscad.psi.OpenSCADResolvableElement"]
    methods=[setName getNameIdentifier]
}

module_call_obj ::= module_obj_name_ref arg_assignment_list SEMICOLON
module_obj_name_ref ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}

block_obj ::= LBRACE statement* RBRACE

empty_obj ::= SEMICOLON

if_obj ::= IF_KEYWORD paren_expr (block_obj | statement) (ELSE_KEYWORD IF_KEYWORD paren_expr (block_obj | statement))* [ELSE_KEYWORD (block_obj | statement)]
for_obj ::=  full_arg_op_identifier full_arg_declaration_list (block_obj | statement)

private declaration ::= variable_declaration | module_declaration | function_declaration

variable_declaration ::= IDENTIFIER EQUALS expr SEMICOLON {
    pin=1
    mixin="com.javampire.openscad.psi.stub.variable.OpenSCADVariableDeclarationStubElementImpl"
    implements=[
        "com.javampire.openscad.psi.OpenSCADNamedElement"
        "com.intellij.psi.StubBasedPsiElement<com.javampire.openscad.psi.stub.variable.OpenSCADVariableStub>"
    ]
    methods=[getPresentation getNameIdentifier]
}

module_declaration ::= MODULE_KEYWORD IDENTIFIER arg_declaration_list statement {
    pin=1
    mixin="com.javampire.openscad.psi.stub.module.OpenSCADModuleDeclarationStubElementImpl"
    implements=[
        "com.javampire.openscad.psi.OpenSCADNamedElement"
        "com.intellij.psi.StubBasedPsiElement<com.javampire.openscad.psi.stub.module.OpenSCADModuleStub>"
    ]
    methods=[getPresentation getNameIdentifier]
}

function_declaration ::= FUNCTION_KEYWORD IDENTIFIER arg_declaration_list EQUALS expr SEMICOLON {
    pin=1
    mixin="com.javampire.openscad.psi.stub.function.OpenSCADFunctionDeclarationStubElementImpl"
    implements=[
        "com.javampire.openscad.psi.OpenSCADNamedElement"
        "com.intellij.psi.StubBasedPsiElement<com.javampire.openscad.psi.stub.function.OpenSCADFunctionStub>"
    ]
    methods=[getPresentation getNameIdentifier]
}

private compound_obj ::= operator object;

operator ::= builtin_op
           | modifier_op
           | module_call_op

module_call_op ::= module_op_name_ref arg_assignment_list
module_op_name_ref ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}

modifier_op ::= background_op
              | debug_op
              | root_op
              | disable_op

background_op ::= PERC
debug_op ::= HASH
root_op ::= EXCL
disable_op ::= MUL

builtin_op ::= common_op_ref arg_assignment_list

common_op_ref ::= COLOR_KEYWORD
                | DIFFERENCE_KEYWORD
                | HULL_KEYWORD
                | INTERSECTION_KEYWORD
                | LINEAR_EXTRUDE_KEYWORD
                | MINKOWSKI_KEYWORD
                | MIRROR_KEYWORD
                | MULTMATRIX_KEYWORD
                | OFFSET_KEYWORD
                | PROJECTION_KEYWORD
                | RENDER_KEYWORD
                | RESIZE_KEYWORD
                | ROTATE_KEYWORD
                | ROTATE_EXTRUDE_KEYWORD
                | SCALE_KEYWORD
                | TRANSLATE_KEYWORD
                | UNION_KEYWORD {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[setName getNameIdentifier]
}

private full_arg_op_identifier ::= INTERSECTION_FOR_KEYWORD
                                 | ASSIGN_KEYWORD
                                 | FOR_KEYWORD
                                 | LET_KEYWORD

expr ::= conditional_group
       | boolean_group
       | add_group
       | mul_group
       | unary_group
       | primary_group

// private rules to define operators with the same priority
private conditional_group ::= elvis_expr | conditional_expr
private boolean_group ::= and_expr | or_expr
private add_group ::= plus_expr | minus_expr
private mul_group ::= mul_expr | div_expr | modulo_expr | power_expr
private unary_group ::= unary_plus_expr | unary_min_expr | unary_negate_expr
private primary_group ::= range_expr
                        | echo_expr
                        | assert_expr
                        | test_expr
                        | builtin_expr
                        | function_call_expr
                        | variable_ref_expr
                        | vector_expr
                        | paren_expr
                        | literal_expr
                        | function_literal_expr
                        | index_expr
                        | qualification_expr

and_expr ::= expr AND expr
or_expr ::= expr OR expr
unary_min_expr ::= MINUS expr
unary_plus_expr ::= PLUS expr
unary_negate_expr ::= EXCL expr
div_expr ::= expr DIV expr
mul_expr ::= expr MUL expr
modulo_expr ::= expr PERC expr
power_expr ::= expr EXP expr
minus_expr ::= expr MINUS expr
plus_expr ::= expr PLUS expr
conditional_expr ::= expr ( LT | GT | LE | GE | EQ | NE ) expr
echo_arg_list ::= LPARENTH ((IDENTIFIER EQUALS expr) | expr | IDENTIFIER | STRING_LITERAL) (COMMA ((IDENTIFIER EQUALS expr) | expr | IDENTIFIER |  STRING_LITERAL))* RPARENTH
echo_element ::= "echo" echo_arg_list
echo_expr ::= echo_element expr
assert_expr ::= assert_element expr
assert_element ::= "assert" LPARENTH expr (',' STRING_LITERAL)? RPARENTH
elvis_expr ::= expr QUERY (elvis_expr | expr) COLON (elvis_expr | expr)
test_expr ::= test_exp_ref LPARENTH expr RPARENTH
test_exp_ref ::= IS_UNDEF_KEYWORD
               | IS_LIST_KEYWORD
               | IS_NUM_KEYWORD
               | IS_BOOL_KEYWORD
               | IS_STRING_KEYWORD
               | IS_FUNCTION_KEYWORD {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[setName getNameIdentifier]
}
function_literal_expr ::= FUNCTION_KEYWORD arg_declaration_list expr
paren_expr ::= LPARENTH expr RPARENTH
index_expr ::= expr LBRACKET <<innerExpression>> RBRACKET
range_expr ::= [EACH_KEYWORD] LBRACKET expr COLON expr [ COLON expr ] RBRACKET
list_expr ::= LPARENTH expr (COMMA expr)* RPARENTH
vector_expr ::= [EACH_KEYWORD] LBRACKET [vector_item ( COMMA+ (vector_item | &RBRACKET) )*] RBRACKET { pin(".*")=2 }
private vector_item ::= (for_element | if_element | bind_else_element | else_element | let_element | echo_element | assert_element)* expr { recoverWhile=recover_vector }
private recover_vector ::= ! (COMMA | RBRACKET)
for_element ::= FOR_KEYWORD for_declaration_list
for_declaration_list ::= LPARENTH for_declaration RPARENTH {pin(".*")=1}
for_declaration ::= for_declaration_cstyle | (IDENTIFIER EQUALS (list_expr | range_expr | expr) (COMMA IDENTIFIER EQUALS (list_expr | range_expr | expr))*) {recoverWhile=recover_arg}
for_declaration_cstyle ::= IDENTIFIER EQUALS expr (COMMA IDENTIFIER EQUALS expr)* SEMICOLON conditional_expr (COMA conditional_expr)* SEMICOLON IDENTIFIER EQUALS expr (COMMA IDENTIFIER EQUALS expr)*
if_element ::= IF_KEYWORD LPARENTH expr RPARENTH [expr &ELSE_KEYWORD]
bind_else_element ::= LPARENTH if_element expr RPARENTH
else_element ::= ELSE_KEYWORD [if_element]
let_element ::= LET_KEYWORD full_arg_declaration_list
builtin_expr ::= builtin_expr_ref arg_assignment_list
               | LET_KEYWORD full_arg_declaration_list expr
builtin_expr_ref ::= ABS_KEYWORD
                   | ACOS_KEYWORD
                   | ASIN_KEYWORD
                   | ATAN_KEYWORD
                   | ATAN2_KEYWORD
                   | CEIL_KEYWORD
                   | CHR_KEYWORD
                   | CONCAT_KEYWORD
                   | COS_KEYWORD
                   | CROSS_KEYWORD
                   | EXP_KEYWORD
                   | FLOOR_KEYWORD
                   | LEN_KEYWORD
                   | LN_KEYWORD
                   | LOG_KEYWORD
                   | LOOKUP_KEYWORD
                   | MAX_KEYWORD
                   | MIN_KEYWORD
                   | NORM_KEYWORD
                   | ORD_KEYWORD
                   | PARENT_MODULE_KEYWORD
                   | POW_KEYWORD
                   | RANDS_KEYWORD
                   | ROUND_KEYWORD
                   | SEARCH_KEYWORD
                   | SIGN_KEYWORD
                   | SIN_KEYWORD
                   | SQRT_KEYWORD
                   | STR_KEYWORD
                   | TAN_KEYWORD
                   | VERSION_KEYWORD
                   | VERSION_NUM_KEYWORD {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[setName getNameIdentifier]
}

qualification_expr ::= expr DOT IDENTIFIER {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}

literal_expr ::= TRUE_KEYWORD
               | FALSE_KEYWORD
               | UNDEF_KEYWORD
               | NUMBER_LITERAL
               | STRING_LITERAL

function_call_expr ::= function_name_ref arg_assignment_list+
function_name_ref ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}

arg_assignment_list ::= LPARENTH arg_assignment? ( COMMA+ arg_assignment )* RPARENTH {pin(".*")=1}
arg_assignment ::= [ parameter_reference EQUALS ] expr {
    recoverWhile=recover_arg
}
private recover_arg ::= ! (COMMA | RPARENTH)
parameter_reference ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.OpenSCADNamedElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADNamedElement"
    methods=[getPresentation getNameIdentifier getReference]
}

arg_declaration_list ::= LPARENTH arg_declaration? ( COMMA arg_declaration? )* RPARENTH {pin(".*")=1}
arg_declaration ::= IDENTIFIER [EQUALS expr] {
    mixin="com.javampire.openscad.psi.OpenSCADNamedElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADNamedElement"
    methods=[getNameIdentifier]
    recoverWhile=recover_arg
}

full_arg_declaration_list ::= LPARENTH full_arg_declaration? ( COMMA+ full_arg_declaration )* RPARENTH {pin(".*")=1}
full_arg_declaration ::= IDENTIFIER EQUALS expr {
    mixin="com.javampire.openscad.psi.OpenSCADNamedElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADNamedElement"
    methods=[getNameIdentifier]
    recoverWhile=recover_arg
}

variable_ref_expr ::= IDENTIFIER {
    mixin="com.javampire.openscad.psi.OpenSCADResolvableElementImpl"
    implements="com.javampire.openscad.psi.OpenSCADResolvableElement"
    methods=[getPresentation getNameIdentifier]
}
