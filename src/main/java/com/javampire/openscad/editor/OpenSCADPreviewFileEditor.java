package com.javampire.openscad.editor;

import com.intellij.ide.util.PropertiesComponent;
import com.intellij.openapi.actionSystem.*;
import com.intellij.openapi.actionSystem.ex.ActionUtil;
import com.intellij.openapi.actionSystem.impl.SimpleDataContext;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.fileEditor.*;
import com.intellij.openapi.fileEditor.impl.EditorHistoryManager;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.Disposer;
import com.intellij.openapi.util.UserDataHolderBase;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.ui.JBColor;
import com.intellij.ui.jcef.JCEFHtmlPanel;
import com.intellij.util.Alarm;
import com.intellij.util.ui.components.BorderLayoutPanel;
import com.javampire.openscad.action.*;
import org.cef.browser.CefBrowser;
import org.cef.browser.CefFrame;
import org.cef.browser.CefMessageRouter;
import org.cef.callback.CefQueryCallback;
import org.cef.handler.CefMessageRouterHandlerAdapter;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;

import static com.intellij.openapi.fileEditor.TextEditorWithPreview.Layout.SHOW_EDITOR;

/**
 * Preview editor. Right side of the {@link TextEditorWithPreview} generated by {@link OpenSCADTextEditorWithPreviewProvider}.
 * Display the preview file (= exported model in STL or 3MF format) in an HTML page through a {@link JCEFHtmlPanel}.
 */
public class OpenSCADPreviewFileEditor extends UserDataHolderBase implements FileEditor {
    private static final Logger LOG = Logger.getInstance(OpenSCADPreviewFileEditor.class);
    private final Project project;
    private final OpenSCADPreviewSite previewSite;
    private final MainPanel mainPanel;
    private @Nullable JCEFHtmlPanel htmlPanel;
    private ActionToolbar previewToolbar;
    private final Alarm mySwingAlarm = new Alarm(Alarm.ThreadToUse.SWING_THREAD, this);

    private OpenSCADPreviewFileEditorConfiguration editorConfig = new OpenSCADPreviewFileEditorConfiguration(this);

    public JCEFHtmlPanel getHtmlPanel() {
        return htmlPanel;
    }

    public OpenSCADPreviewFileEditor(@NotNull final Project project, @NotNull final VirtualFile scadFile) {
        this.project = project;
        this.previewSite = OpenSCADPreviewSiteFactory.getInstance(project).createSite(scadFile);
        this.mainPanel = new MainPanel();
        this.mainPanel.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                mySwingAlarm.addRequest(
                        () -> attachHtmlPanel(),
                        0,
                        ModalityState.stateForComponent(getComponent())
                );
            }

            @Override
            public void componentHidden(ComponentEvent e) {
                mySwingAlarm.addRequest(
                        () -> detachHtmlPanel(),
                        0,
                        ModalityState.stateForComponent(getComponent())
                );
            }
        });

        if (isPreviewShown(project, scadFile)) {
            attachHtmlPanel();
        }
    }

    public OpenSCADPreviewSite getPreviewSite() {
        return previewSite;
    }

    public VirtualFile getFile() {
        return previewSite.htmlFile.getOriginalFile();
    }

    public OpenSCADPreviewFileEditorConfiguration getEditorConfig() {
        return editorConfig;
    }

    @Override
    public @NotNull JComponent getComponent() {
        return mainPanel;
    }

    @Override
    public @Nullable JComponent getPreferredFocusedComponent() {
        return mainPanel;
    }

    private static boolean isPreviewShown(@NotNull final Project project, @NotNull final VirtualFile file) {
        // Try and get historical layout for the file, only works when file has been opened in the past
        final OpenSCADTextEditorWithPreviewProvider provider = FileEditorProvider.EP_FILE_EDITOR_PROVIDER.findExtension(OpenSCADTextEditorWithPreviewProvider.class);
        if (provider != null) {
            final FileEditorState state = EditorHistoryManager.getInstance(project).getState(file, provider);
            if (state instanceof TextEditorWithPreview.MyFileEditorState) {
                return ((TextEditorWithPreview.MyFileEditorState) state).getSplitLayout() != SHOW_EDITOR;
            }
        }

        // No history for the file, getting the last known layout, whatever the file
        final String lastUsed = PropertiesComponent.getInstance().getValue("OpenSCADTextEditorWithPreviewLayout");
        return TextEditorWithPreview.Layout.fromId(lastUsed, TextEditorWithPreview.Layout.SHOW_EDITOR_AND_PREVIEW) != SHOW_EDITOR;
    }

    public Boolean isPreviewShown() {
        return isPreviewShown(project, previewSite.previewFile);
    }

    private void attachHtmlPanel() {
        if (htmlPanel == null) {
            htmlPanel = new JCEFHtmlPanel(true, null, previewSite.htmlFile.getPreviewUrl().toExternalForm());
            final CefMessageRouter messageRouter = CefMessageRouter.create();
            messageRouter.addHandler(new CefMessageRouterHandler(), true);
            htmlPanel.getJBCefClient().getCefClient().addMessageRouter(messageRouter);
            previewToolbar = createToolbar(htmlPanel.getComponent());
            mainPanel.add(previewToolbar.getComponent(), BorderLayout.NORTH);
            mainPanel.add(htmlPanel.getComponent(), BorderLayout.CENTER);
            if (mainPanel.isShowing()) mainPanel.validate();
            mainPanel.repaint();
            htmlPanel.getCefBrowser().reload();
            generatePreview();
        }
    }

    private void detachHtmlPanel() {
        if (htmlPanel != null) {
            mainPanel.remove(previewToolbar.getComponent());
            previewToolbar = null;
            mainPanel.remove(htmlPanel.getComponent());
            Disposer.dispose(htmlPanel);
            htmlPanel = null;
        }
    }

    private ActionToolbar createToolbar(final JComponent targetComponent) {
        ActionToolbar actionToolbar = ActionManager.getInstance().createActionToolbar(
                ActionPlaces.EDITOR_TOOLBAR,
                new DefaultActionGroup(
                        new RefreshPreviewAction(),
                        new ToggleAutoRefreshAction(),
                        new Separator(),
                        new ToggleGridAction(),
                        new ToggleAxisAction(),
                        new SetModelColorAction(),
                        new Separator(),
                        new OpenAction(),
                        new ExportAction()
                ), true);
        actionToolbar.setTargetComponent(targetComponent);
        return actionToolbar;
    }

    /**
     * Fake an action event to generate the preview.
     */
    private void generatePreview() {
        final AnAction generatePreviewAction = new GeneratePreviewAction();
        final AnActionEvent event = AnActionEvent.createFromDataContext(
                ActionPlaces.UNKNOWN,
                new Presentation(GeneratePreviewAction.TEXT),
                SimpleDataContext.builder()
                        .add(OpenSCADDataKeys.PREVIEW_EDITOR, OpenSCADPreviewFileEditor.this)
                        .build()
        );
        ActionUtil.performActionDumbAwareWithCallbacks(generatePreviewAction, event);
    }

    @Override
    @Nls(capitalization = Nls.Capitalization.Title)
    @NotNull
    public String getName() {
        return OpenSCADPreviewFileEditor.class.getSimpleName();
    }

    @Override
    public void setState(@NotNull FileEditorState state) {
    }

    @Override
    public boolean isModified() {
        return false;
    }

    @Override
    public boolean isValid() {
        return true;
    }

    @Override
    public void addPropertyChangeListener(@NotNull PropertyChangeListener listener) {
    }

    @Override
    public void removePropertyChangeListener(@NotNull PropertyChangeListener listener) {
    }

    @Override
    public @Nullable FileEditorLocation getCurrentLocation() {
        return null;
    }

    @Override
    public void dispose() {
        detachHtmlPanel();
        ApplicationManager.getApplication().runWriteAction(() -> {
            try {
                previewSite.previewFile.delete(this);
                getFile().delete(this);
            } catch (final IOException ioe) {
                LOG.warn("An error occurred while deleting temporary scad preview files.", ioe);
            }
        });
    }

    private class MainPanel extends BorderLayoutPanel implements DataProvider {
        @Override
        public @Nullable Object getData(@NotNull @NonNls final String dataId) {
            if (OpenSCADDataKeys.PREVIEW_EDITOR.is(dataId))
                return OpenSCADPreviewFileEditor.this;
            return null;
        }
    }

    private class CefMessageRouterHandler extends CefMessageRouterHandlerAdapter {

        private final static String DELIMITER = "=";
        private final static String SHOW_AXIS = "showAxis";
        private final static String SHOW_GRID = "showGrid";
        private final static String MODEL_COLOR = "modelColor";

        @Override
        public boolean onQuery(CefBrowser browser, CefFrame frame, long queryId, String request, boolean persistent, CefQueryCallback callback) {
            final String[] parsed = request.split(DELIMITER);
            if (SHOW_AXIS.equals(parsed[0])) {
                editorConfig.setShowAxis(Boolean.valueOf(parsed[1]));
            } else if (SHOW_GRID.equals(parsed[0])) {
                editorConfig.setShowGrid(Boolean.valueOf(parsed[1]));
            } else if (MODEL_COLOR.equals(parsed[0])) {
                editorConfig.setModelColor(JBColor.decode(parsed[1]));
            } else {
                return false;
            }
            return true;
        }
    }
}
